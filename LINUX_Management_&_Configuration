USERADD, USERMOD, USERDEL PASSWD,CHAGE:-
    useradd command is used to create new accounts in Linux
    usermod command used to modify the existing accounts in linux
    userdel command is used to delete local account in linux
    passwd command used assign password to local accounts or users.
    chage comamnd is used to view & modify users password expiry information
>>>>>>>>>>>>>>>>>>>>>> https://www.linuxtechi.com/linux-commands-to-manage-local-accounts   <<<<<<<<<<<<<<<<<<<<<<<

Let’s create a username ‘harry’ and assign password.
    [root@linuxtechi ~]# useradd harry ; echo -e "Roxicant@123#\nRoxicant@123#" | passwd harry
    Changing password for user harry.
    New password: Retype new password: passwd: all authentication tokens updated successfully.
    [root@linuxtechi ~]#

------------------------------------------------------------------------------------------------
Redirection:-                                   +                           FileDescripter
 File 	                File Descriptor
Standard Input STDIN 	0
Standard Output STDOUT 	1
Standard Error STDERR 	2

Examples:-
1.    $ myprogram 2>errorsfile  ---------> error output
2.    # find . -name 'my*' 2>error.log  ----------------> This cmd looks for all files starting with "my" and if it has denied permissions to access the errot log will get redirected to this log file.
3.  Server Administrators frequently, list directories and store both error and standard output into a file, which can be processed later. Here is the command.
      # ls Documents ABC> dirlist 2>&1
      
 Summary

1    Each file in Linux has a corresponding File Descriptor associated with it
2   The keyboard is the standard input device while your screen is the standard output device
3    ">" is the output redirection operator. ">>" appends output to an existing file
4    "<" is the input redirection operator
5    ">&"re-directs output of one file to another.
6    You can re-direct error using its corresponding File Descriptor 2.

++++++FileDescripter++++++++
In simple words, when you open a file,the operating system creates an entry to represent that file and store the information 
about that opened file. So if there are 100 files opened in your OS then there will be 100 entries in OS (somewhere in kernel). 
These entries are represented by integers like (...100, 101, 102....). 
This entry number is the file descriptor. So it is just an integer number that uniquely represents an opened file in operating 
system. If your process opens 10 files then your Process table will have 10 entries for file descriptors.

3>&1 1>&2 2>&3
The 3>&1 in your command line will create a new file descriptor and redirect it to 1 which is STDOUT. 
Now 1>&2 will redirect the file descriptor 1 to STDERR and 2>&3 will redirect file descriptor 2 to 3 which is STDOUT
------------------------------------------------------------------------------------------------------------------------------

CRON JOBs

# rpm -qa | grep cron  ---------------> -q = querry ; -a = all installed packages
# systemctl status crond.service    ---> to check service status

# crontab -l -----> to list all cron jobs
# cat /etc/crontab    or   crontab -e    ------> to edit crontab or shedule a job

# crontab -e -u <username>  ----> to edit other user crontab
# crontab -l -u <username> ------> to list other user crontab
# crontab -r -u <username> ------> to delete/remove otheruser crontab job

To ALLOW or DENY users to create jobs
# vim /etc cron.allow ----------------> allow user list
# vim /etc cron.deny ----------------> deny user list
# find /etc/ -name "cron.*" -print
    cron.d/       cron.daily/   cron.hourly/  cron.monthly/ cron.weekly/  
      |
      .----> cron.hourly
    juss make entries into this file and it will be executed hourly , weekly, monthly ,... etc
    
Example:-
1. on 33 min 9th hr.... if the day is SUNDAY(0) then only this scrit will be executed
        33 9 8-14 mar * [`date +\%u = 0] && sh /scripts/testing.sh  
2. */5 * * * * -----> every 5 minutes
3. to monitor cronjob status
        */5 * * * * sh /scripts/testing.sh 2>&1 /test/cron.log echo "Exit Code" $? >> test log.log        

-----------------------------------------------------------------------------------------------------------------------------

