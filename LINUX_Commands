exec, source &  ./script
------------------------------------------------------------------
./script -----> creates a new shell and executes each command in the script within the new shell. When the end of the script file is encountered, the new shell exits
sourse -------> source execute a shell script within the context of the current shell. Since execution takes place within the context of the current shell, any changes in the shell are retained following the completion of the shell. 
       # source ./.barshrc
ecec ---------> The exec command will execute a command in place of the current shell, that is, it terminates the current shell and starts a new process in its place.
                exec was often used to execute the last command of a shell script. This would kill the shell slightly earlier; otherwise, the shell would wait until the last command was finished. This practice saves a process and some memory.
                try exec ls. you will be logged out from your login shell.

            -->      exec also manipulates file descriptors in the Bourne shell.
                     $exec >>logoutput
            -->      after issuing this command you will not see output of any command in your console. all output goes into logoutput file.
                     use exec >/dev/console to return.
            -->      $exec 2>errs.out
                     means that from then on, stderr goes into errs.out file


------------------------------------------------------------------------
# which ------> shows the full path of (shell) commands
       which [options] [--] programname [...]
                -a >>> print all matching pathnames of each argument
---------------------------------------------------------------------------                
ALIAS temporay & permanent
Temporary ---> get removed after restart
# alias clear='tput clear'
      # alias  -----> to list all alias in albhabetical order 
      # umalias <command_name> ------->to remove any alias
Permanent -----> but after edit restart the system
*****************The /etc/skel/.bashrc file is copied into the home *****************
#vim $HOME/.bashrc --------> at the end of the file list your alias  ----------> but this alias is local to the user
#vim /etc/skel/.bashrc --------> at the end of the file list your alias  ----------> but this alias will get coped to every user which is created
-------------------------------------------------------------------------------

EXPORT - Set export attribute for shell variables.
# export    
         -p ---> List of all names that are exported in the current shell
         -n ---> Remove names from export list
         -f ---> Names are exported as functions
   export [-fn] [name[=value] ...] or export -p
$$$$ EXAMPLE's $$$$
*To set vim as a text editor        ----------------------->To remove names from exported list, use -n option
                                                            $ export -n EDITOR
    $ export EDITOR=/usr/bin/vim    ----------------------> To Check $ export | grep EDITOR
*To set colorful prompt
    $ export PS1='\[\e[1;32m\][\u@\h \W]\$\[\e[0m\] '
*To Set JAVA_HOME:
    $ export JAVA_HOME=/usr/local/jdk
*To export shell function:
    $ name () { echo "tutorialspoint"; }
    $ export -f name
        output:
          $ name
          tutorialspoint
--------------------------------------------------------------------------------------          
          
TAIL & HEAD
# tail -n 5 log_file.txt
# head -n 4 log_file.txt
--------------------------------------------------------------------------------------
MORE & LESS
#export -p | more
#export -p | less
--------------------------------------------------------------------------------------

KILL & KILLALL
1 HUP --> hang up
3 QUIT --> stoprunning
9 KILL --> unconditionally terminate
17 STOP --> stop unconditionally but doesent terminate
18 TSTP --> stop or pauses, but continue to run in background
19 COUNT --> resume execution after STOP or TSTP
       
       -s -------------------> this parameter allow you to specify other signal
# kill -9 <process_id>  ------> to kill only process
# killall -9 httpd*     ------> to kill entire process tree
--------------------------------------------------------------------------------------
Access Control List ====>>>> GETFACL & SETFACL

GETFACL  -----> to return file/directories permissions

[system]$ getfacl file.sh 
# file: file.sh
# owner: vagrant
# group: vagrant
user::rw-
group::rw-
other::r--

Here "getfacl x" will get the ACL of the directory named "x" and this output is given to the setfacl command using pipe. 
       # getfacl x | setfacl -R --setfile =- y
To copy the ACL of the parent directory to its child, use the following command 
       # getfacl . | setfacl -R --set-file=- subdirectory_name
To back up permissions in the current directory and its subdirectories recursively:
       # getfacl -R . >permissions.facl
To restore permissions:
       # setfacl --restore=permissions.facl
       
--------------------------------------------------------------------------------------
UMASK & CHMOD

The difference is that umask entails only new files. As you stated, umask sets the default permissions that a file/directory will have on creation time, but afterwards umask doesn't affect them anymore.
chmod, however, needs the file be created prior to be run.
Therefore, if you run umask, it will have no effect at all on existing files.
 @@@@@@@@@@ UMASK @@@@@@@@@@           Default is ----> 0002
       file   dir
0      rw     rwx
1      rw     rw     
2      r      rx
3      r      r
4      w      wx
5      w      w
6      x      x
7      (none) (none)

@@@@@@@@@@@ CHMOD @@@@@@@@@@
4 -> r
2 -> w
1 -> x
------------------------------------------------------------------------------------
find & locate

locate ---> has only one big advantage over find is speed.
find
       # find /home -name tecmint.txt   ----->Output:- techmint.txt
       # find /home -iname tecmint.txt   ----->Output:- technimt.txt
                                                        TecHMint.tXt
*Find Directories Using Name
        # find / -type d -name Tecmint
*Find Files With 777 Permissions
        # find . -type f -perm 0777 -print
*Find Files Without 777 Permissions
        # find / -type f ! -perm 777
*Find PHP Files Using Name
        # find . -type f -name tecmint.php

Find all php files in a directory.
       # find . -type f -name "*.php"
              ./tecmint.php
              ./login.php
              ./index.php

1. Find SGID Files with 644 Permissions

Find all the SGID bit files whose permissions set to 644.

# find / -perm 2644

10. Find Sticky Bit Files with 551 Permissions

Find all the Sticky Bit set files whose permission are 551.

# find / -perm 1551

11. Find SUID Files

Find all SUID set files.

# find / -perm /u=s

12. Find SGID Files

Find all SGID set files.

# find / -perm /g=s

13. Find Read Only Files

Find all Read Only files.

# find / -perm /u=r

14. Find Executable Files

Find all Executable files.

# find / -perm /a=x

15. Find Files with 777 Permissions and Chmod to 644

Find all 777 permission files and use chmod command to set permissions to 644.

# find / -type f -perm 0777 -print -exec chmod 644 {} \;

16. Find Directories with 777 Permissions and Chmod to 755

Find all 777 permission directories and use chmod command to set permissions to 755.

# find / -type d -perm 777 -print -exec chmod 755 {} \;

17. Find and remove single File

To find a single file called tecmint.txt and remove it.

# find . -type f -name "tecmint.txt" -exec rm -f {} \;

18. Find and remove Multiple File

To find and remove multiple files such as .mp3 or .txt, then use.

# find . -type f -name "*.txt" -exec rm -f {} \;

OR

# find . -type f -name "*.mp3" -exec rm -f {} \;

19. Find all Empty Files

To find all empty files under certain path.

# find /tmp -type f -empty

20. Find all Empty Directories

To file all empty directories under certain path.

# find /tmp -type d -empty

21. File all Hidden Files

To find all hidden files, use below command.

# find /tmp -type f -name ".*"

Part III – Search Files Based On Owners and Groups
22. Find Single File Based on User

To find all or single file called tecmint.txt under / root directory of owner root.

# find / -user root -name tecmint.txt

23. Find all Files Based on User

To find all files that belongs to user Tecmint under /home directory.

# find /home -user tecmint

24. Find all Files Based on Group

To find all files that belongs to group Developer under /home directory.

# find /home -group developer

25. Find Particular Files of User

To find all .txt files of user Tecmint under /home directory.

# find /home -user tecmint -iname "*.txt"

Part IV – Find Files and Directories Based on Date and Time
26. Find Last 50 Days Modified Files

To find all the files which are modified 50 days back.

# find / -mtime 50

27. Find Last 50 Days Accessed Files

To find all the files which are accessed 50 days back.

# find / -atime 50

28. Find Last 50-100 Days Modified Files

To find all the files which are modified more than 50 days back and less than 100 days.

# find / -mtime +50 –mtime -100

29. Find Changed Files in Last 1 Hour

To find all the files which are changed in last 1 hour.

# find / -cmin -60

30. Find Modified Files in Last 1 Hour

To find all the files which are modified in last 1 hour.

# find / -mmin -60

31. Find Accessed Files in Last 1 Hour

To find all the files which are accessed in last 1 hour.

# find / -amin -60

Part V – Find Files and Directories Based on Size
32. Find 50MB Files

To find all 50MB files, use.

# find / -size 50M

33. Find Size between 50MB – 100MB

To find all the files which are greater than 50MB and less than 100MB.

# find / -size +50M -size -100M

34. Find and Delete 100MB Files

To find all 100MB files and delete them using one single command.

# find / -size +100M -exec rm -rf {} \;

35. Find Specific Files and Delete

Find all .mp3 files with more than 10MB and delete them using one single command.

# find / -type f -name *.mp3 -size +10M -exec rm {} \;
