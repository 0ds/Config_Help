exec, source &  ./script
------------------------------------------------------------------
./script -----> creates a new shell and executes each command in the script within the new shell. When the end of the script file is encountered, the new shell exits
sourse -------> source execute a shell script within the context of the current shell. Since execution takes place within the context of the current shell, any changes in the shell are retained following the completion of the shell. 
       # source ./.barshrc
exec ---------> The exec command will execute a command in place of the current shell, that is, it terminates the current shell and starts a new process in its place.
                exec was often used to execute the last command of a shell script. This would kill the shell slightly earlier; otherwise, the shell would wait until the last command was finished. This practice saves a process and some memory.
                try exec ls. you will be logged out from your login shell.

            -->      exec also manipulates file descriptors in the Bourne shell.
                     $exec >>logoutput
            -->      after issuing this command you will not see output of any command in your console. all output goes into logoutput file.
                     use exec >/dev/console to return.
            -->      $exec 2>errs.out
                     means that from then on, stderr goes into errs.out file


------------------------------------------------------------------------
# which ------> shows the full path of (shell) commands
       which [options] [--] programname [...]
                -a >>> print all matching pathnames of each argument
                
                Which       vs     Whereis
                ``````````````````````````                                                                             
[vagrant@localhost ~]$ whereis cat
cat: /usr/bin/cat /usr/share/man/man1/cat.1.gz /usr/share/man/man1p/cat.1p.gz
[vagrant@localhost ~]$ which cat
/usr/bin/cat
[vagrant@localhost ~]$ which useradd
/usr/bin/which: no useradd in (/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/vagrant/.local/bin:/home/vagrant/bin)
[vagrant@localhost ~]$ whereis useradd
useradd: /usr/sbin/useradd /usr/share/man/man8/useradd.8.gz
                
---------------------------------------------------------------------------                
ALIAS temporay & permanent
Temporary ---> get removed after restart
# alias clear='tput clear'
      # alias  -----> to list all alias in albhabetical order 
      # unalias <command_name> ------->to remove any alias
Permanent -----> but after edit restart the system
*****************The /etc/skel/.bashrc file is copied into the home *****************
#vim $HOME/.bashrc --------> at the end of the file list your alias  ----------> but this alias is local to the user
#vim /etc/skel/.bashrc --------> at the end of the file list your alias  ----------> but this alias will get coped to every user which is created
-------------------------------------------------------------------------------

EXPORT - Set export attribute for shell variables.
# export    
         -p ---> List of all names that are exported in the current shell
         -n ---> Remove names from export list
         -f ---> Names are exported as functions
   export [-fn] [name[=value] ...] or export -p
$$$$ EXAMPLE's $$$$
*To set vim as a text editor        ----------------------->To remove names from exported list, use -n option
                                                            $ export -n EDITOR
    $ export EDITOR=/usr/bin/vim    ----------------------> To Check $ export | grep EDITOR
*To set colorful prompt
    $ export PS1='\[\e[1;32m\][\u@\h \W]\$\[\e[0m\] '
*To Set JAVA_HOME:
    $ export JAVA_HOME=/usr/local/jdk
*To export shell function:
    $ name () { echo "tutorialspoint"; }
    $ export -f name
        output:
          $ name
          tutorialspoint
--------------------------------------------------------------------------------------          
          
TAIL & HEAD
# tail -n 5 log_file.txt
# head -n 4 log_file.txt

To open the last edited file in the current directory use the combination of ls,head and vi commands as shown below
       # vim `ls -1t | head -1`        ------> Method 1  ---------->     tail -5  (means last five)
                   \...> (1 means ONE entry per line)
       # ls -1t | head -1 | xargs vim  ------> Method 2             
--------------------------------------------------------------------------------------
MORE & LESS
#export -p | more
#export -p | less
--------------------------------------------------------------------------------------

KILL & KILLALL
1 HUP --> hang up  i.e will ask it to reload the configuration file
3 QUIT --> stoprunning
9 KILL --> unconditionally terminate
17 STOP --> stop unconditionally but doesent terminate
18 TSTP --> stop or pauses, but continue to run in background
19 COUNT --> resume execution after STOP or TSTP
       
       -s -------------------> this parameter allow you to specify other signal
# kill -9 <process_id>  ------> to kill only process
# killall -9 httpd*     ------> to kill entire process tree
--------------------------------------------------------------------------------------
Access Control List ====>>>> GETFACL & SETFACL

What is ACL ?
Access control list (ACL) provides an additional, more flexible permission mechanism for file systems. 
It is designed to assist with UNIX file permissions. ACL allows you to give permissions for any user or
group to any disc resource.
Use of ACL :
Think of a scenario in which a particular user is not a member of group created by you but still you want to give
some read or write access, how can you do it without making user a member of group, here comes in picture Access
Control Lists, ACL helps us to do this trick.
Basically, ACLs are used to make a flexible permission mechanism in Linux.


GETFACL  -----> to return file/directories permissions

[system]$ getfacl file.sh 
# file: file.sh
# owner: vagrant
# group: vagrant
user::rw-
group::rw-
other::r--

Here "getfacl x" will get the ACL of the directory named "x" and this output is given to the setfacl command using pipe. 
       # getfacl x | setfacl -R --set-file=- y              -OR- # getfacl x.txt | setfacl --set-file=- y.txt     <====== For file
To copy the ACL of the parent directory to its child, use the following command 
       # getfacl . | setfacl -R --set-file=- subdirectory_name
To copy permissions from one file to another
       # getfacl --access /dir1/ | setfacl -d -M- /dir2/         
To back up permissions in the current directory and its subdirectories recursively:
       # getfacl -R . >permissions.facl
To restore permissions:
       # setfacl --restore=permissions.facl ------------------> sometimes We have to RUN this Command Twice to take affect.
To remove an acl entry   =============> The -x option of the setfacl command will remove an acl entry from the targeted file    
       paul@laika:~/test$ getfacl file33 | grep sandra
       user:sandra:rwx
       paul@laika:~/test$ setfacl -x sandra file33
To remove the complete acl ===========> The -b option of the setfacl command will remove the acl from the targeted file.
       paul@laika:~/test$ setfacl -b file33 
       paul@laika:~/test$ getfacl file33 
       # file: file33
       # owner: paul
       # group: paul
       user::rw-
       group::r--
       other::r--
The acl mask ==============> 
       
       
       
--------------------------------------------------------------------------------------
UMASK & CHMOD

The difference is that umask entails only new files. As you stated, umask sets the default permissions that a file/directory will have on creation time, but afterwards umask doesn't affect them anymore.
chmod, however, needs the file be created prior to be run.
Therefore, if you run umask, it will have no effect at all on existing files.
 @@@@@@@@@@ UMASK @@@@@@@@@@           Default is ----> 0002
       file   dir
0      rw     rwx
1      rw     rw     
2      r      rx
3      r      r
4      w      wx
5      w      w
6      x      x
7      (none) (none)

@@@@@@@@@@@ CHMOD @@@@@@@@@@
4 -> r
2 -> w
1 -> x

CHMOD recursive changing of permissions
       # chmod -R *
------------------------------------------------------------------------------------
find & locate

*locate ---> has only one big advantage over find is speed.
*find runs in real time, so its output is always up to date.
       Because locate(1) relies on a database updated hours or days in the past, its output can be outdated.
find
       # find /home -name tecmint.txt   ----->Output:- techmint.txt
       # find /home -iname tecmint.txt   ----->Output:- technimt.txt
                                                        TecHMint.tXt
*Find Directories Using Name
        # find / -type d -name Tecmint
*Find Files With 777 Permissions
        # find . -type f -perm 0777 -print
*Find Files Without 777 Permissions
        # find / -type f ! -perm 777
*Find PHP Files Using Name
        # find . -type f -name tecmint.php

*Find all php files in a directory.
       # find . -type f -name "*.php"
              ./tecmint.php
              ./login.php
              ./index.php

* Find SUID Files whose permission to 777                     -----------> SUID
       # find / -perm 4777
* Find all the SGID bit files whose permissions set to 644.   -----------> SGID
       # find / -perm 2644
* Find Sticky Bit Files with 551 Permissions                  ------------> Sticky Bit
       # find / -perm 1551
*Find all 777 permission files and use chmod command to set permissions to 644.   --------------> FILE
       # find / -type f -perm 0777 -print -exec chmod 644 {} \;
*Find all 777 permission directories and use chmod command to set permissions to 755. ----------> DIRECTORY
       # find / -type d -perm 777 -print -exec chmod 755 {} \;
*Find and remove single File
       # find . -type f -name "tecmint.txt" -exec rm -f {} \;
*Find and remove Multiple File
       # find . -type f -name "*.txt" -exec rm -f {} \;
*Find all empty files under certain path.  -------------------------->FILE
       # find /tmp -type f -empty
*File all empty directories under certain path.-----------------------> Directory
       # find /tmp -type d -empty
*Find all hidden files, use below command.
       # find /tmp -type f -name ".*"
*Find all or single file called tecmint.txt under / root directory of owner root.
       # find / -user root -name tecmint.txt
*Find all Files Based on User
       # find /home -user tecmint
*Find all Files Based on Group
       # find /home -group developer
*Find Last 50 Days Modified Files
       # find / -mtime 50
*Find Last 50 Days Accessed Files
       # find / -atime 50
*Find Last 50-100 Days Modified Files
       # find / -mtime +50 –mtime -100
*Find Changed Files in Last 1 Hour
       # find / -cmin -60
*Find Modified Files in Last 1 Hour
       # find / -mmin -60
*Find Accessed Files in Last 1 Hour
       # find / -amin -60
*Find 50MB Files
       # find / -size 50M
*Find Size between 50MB – 100MB
       # find / -size +50M -size -100M
*Find and Delete 100MB Files
       # find / -size +100M -exec rm -rf {} \;
*Find Specific Files and Delete
       # find / -type f -name *.mp3 -size +10M -exec rm {} \;
-------------------------------------------------------------------------------------------------
STICKEY BIT, SUID , SGID
1. SUID permission  ----------> 4
2. SGID permission  ----------> 2
3. Sticky bit       ----------> 1
Set-user Identification (SUID)
  When a command or script with SUID bit set is run, its effective UID becomes that of the owner of the file, rather than of the user who is running it.
         # chmod 4555 [path_to_file]
Set-group identification (SGID)
  SGID permission is similar to the SUID permission, only difference is – when the script or command with SGID on is run, it runs as if it were a member of the same group in which the file is a member
  When SGID permission is set on a directory, files created in the directory belong to the group of which the directory is a member.
       # chmod 2555 [path_to_file]
Sticky Bit
 The sticky bit is primarily used on shared directories.
 It is useful for shared directories such as /var/tmp and /tmp because users can create files, read and execute files owned by other users, but are not allowed to remove files owned by other users.
 For example if user bob creates a file named /tmp/bob, other user tom can not delete this file even when the /tmp directory has permission of 777. If sticky bit is not set then tom can delete /tmp/bob, as the /tmp/bob file inherits the parent directory permissions.
 root user (Off course!) and owner of the files can remove their own files.
       - T refers to when the execute permissions are off.
       - t refers to when the execute permissions are on.
       # chmod +t [path_to_directory]
       or 
       # chmod 1777 [path_to_directory]
----------------------------------------------------------------------------------------------------       
TAR
1. Type tar -xvf yourfile.tar to extract the file to the current directory.
2. Or tar -C /myfolder -xvf yourfile.tar to extract to another directory.
3. tar -czvf name-of-archive.tar.gz /path/to/directory-or-file

Here’s what those switches actually mean:

    -c: Create an archive.
    -z: Compress the archive with gzip.
    -v: Display progress in the terminal while creating the archive, also known as “verbose” mode. The v is always optional in these commands, but it’s helpful.
    -f: Allows you to specify the filename of the archive.

----------------------------------------------------------------------------------------------------
GZ --> GunZip   ,   Gzip

extention ---> .gz

# gunzip splash.xpm.gz      ----> Extract
# gzip splash.xpm           ----> Compress

-----------------------------------------------------------------------------------------------------
LS (List) & file

FILE - command
# file * --------------------------------------------------------> its gies a much more descriptive output
[vagrant@localhost shell_scripting]$ file *
a:                setuid regular file, no read permission
a1:               directory
b:                setuid empty
cc:               setuid empty
file.sh:          setuid regular file, no read permission
h:                setuid empty
permissions.facl: setuid regular file, no read permission
s:                setuid setgid directory
script.sh:        ASCII text

ls:- command
Sorting:-
---------
ls -------> arranging in terms of accending or decending order in terms of field

# ls -l | sort -kr 9  ----------------> short on basis of field 9
# ls -l | sort -r -k 9 ----------------> reverse-short  on basis of field 9

>>>>>>>>>>>>>>>>>.. for including multiple fields 
                            #ls -l | sort -k 3,3 -k 9
 # ls -S ---> from max to min size list                            
      -rS --> from min to max size list  
      -R ---> list recursively
 # ls --sort=time
       Valid arguments are:
       - ‘none’
       - ‘time’
       - ‘size’
       - ‘extension’
       - ‘version’
# ls -t  ------------> list in order of "Last Modified File"
To open the last edited file in the current directory use the combination of ls,head and vi commands as shown below
       # vim `ls -1t | head -1`        ------> Method 1  ---------->     tail -5  (means last five)
                   \...> (1 means ONE entry per line)
       # ls -1t | head -1 | xargs vim  ------> Method 2
--------------------------------------------------------------------------------------------------      

WC - Word Count

# wc -l  --> number of lines
     - w --> ||      || words
     -c  --> ||      || charecters
----------------------------------------------------------------------     
tr command - TRANSLATE

       Syntax :
              $ tr [OPTION] SET1 [SET2]
Options
-c : complements the set of characters in string.i.e., operations apply to characters not in the given set
-d : delete characters in the first set from the output.
-s : replaces repeated characters listed in the set1 with single occurrence
-t : truncates set1

1. to view disk usage in numbers
       # df --output=pcent /dev/sdb4 | tr -dc '0-9'
       >>>>> 86
2. How to convert lower case to upper case
       # cat geekfile | tr “[:lower:]” “[:upper:]”
3. How to translate white-space to tabs------------------------------> Remove White Spaces
       $ echo "Welcome To GeeksforGeeks" | tr [:space:] '\t'              #  echo "Welcome To GeeksforGeeks" | tr  -d [:space:] 
       >>>>>Welcome    To    GeeksforGeeks
4. How to translate braces into parenthesis
       # tr '{}' '()'   newfile.txt
5. How to use squeeze repetition of characters using -s
       # echo "Welcome    To    GeeksforGeeks" | tr -s [:space:] ' '
       >>>>>Welcome To GeeksforGeeks
6. How to delete specified characters using -d option
       # echo "Welcome To GeeksforGeeks" | tr -d 'w'
       >>>>>>elcome To GeeksforGeeks
7. To remove all the digits from the string, use
       # echo "my ID is 73535" | tr -d [:digit:]
       >>>>>my ID is
8. How to complement the sets using -c option
   You can complement the SET1 using -c option. For example, to remove all characters except digits, you can use the following.
       # echo "my ID is 73535" | tr -cd [:digit:]   -------------OR----------- # echo “unix” | tr –c “u” “a”
       >>>>>73535                                                              >>>>>>  Uaaa
9. TRUNCATE ---------->     -t
       A. Replace OR some Value spaces with some value
            [vishalraj@localhost ~]$ echo "i can    see u" | tr -t  ' ' '0'
                                   >>>>>>>>>>>i0can0000see0u
            [vishalraj@localhost ~]$ echo "Vishal-Raj" | tr -t  '-' '_'
                                     >>>>>>>>>> Vishal_Raj
                                   
----------------------------------------------------------------------------------------------
RENAME:-
 synatx:-
       rename old_name new_name <file_or_file-location>
       
1, to change file extention
   # rename .html .css .
2. change filename--> a.txt
   # rename a.txt b.txt a.txt
-----------------------------------------------------------------------------------
scp command --------> transfer files & folders from one server to another
 \---> PORT used by this service is '22'
 
 scp 
       –P port: Specifies the port to connect on the remote host.
       –r: Recursively copy entire directories.
       –v: Verbose mode.
       -l: limited bandwidth usage
       -i: insert key

1. # scp -i key.pem file.txt root@192.168.121.117:/home/vagrant -------------> ***key.pem*** ==>will contain the public key the other server
2. # scp  -i key.pem -r Python-3.7.3 root@192.168.121.117:/home/vagrant                                OR
3. # scp -i key.pem -P 5677 Python-3.7.3 root@192.168.121.117:/home/vagrant         ==>if u have pasted your public ip in the authorized_users file which is within $HOME/.ssh/ folder and the key has no passphrase u wont need to use "-i key.pem" option
4. # scp -l 1000 -r Python-3.7.3 root@192.168.121.117:/home/vagrant 
-----------------------------------------------------------------------------------------------------------

SLEEP ------------------------> Hold session / Wait command

# sleep 120
         \.....> time in seconds.
         
------------------------------------------------------------------------------------------------------------------

ARP:-
Syntax:-
          arp [-v] [-i if] [-H type] -a [hostname]
          
# arp -vn
# arp -H ether
--------------------------------------------------------------------------

xargs:-
It converts input from standard input into arguments to a command. 

Example:
       $ cd dir/ | xargs ls -liasn
       total 56
       1196033  4 drwxrwxr-x.  6 1000 1000  4096 May  6 20:11 .
       1193905  4 drwx------. 23 1000 1000  4096 May  7 11:05 ..
       1195983  4 drwxrwxr-x.  2 1000 1000  4096 Apr 21 20:02 ansible
       1196257  4 -rw-rw-r--.  1 1000 1000  2243 May  6 19:36 Assignment.txt
       1204233  4 drwxrwxr-x.  2 1000 1000  4096 Apr 10 18:52 branches
       1195863 12 -rw-rw-r--.  1 1000 1000 10609 Apr  3 11:47 linux.txt

-----------------------------------------------------------------------------------------------------------

cut:-

In this, 1- indicate from 1st byte to end byte of a line
$ cut -b 1- state.txt
Andhra Pradesh
Arunachal Pradesh

In this, -3 indicate from 1st byte to 3rd byte of a line
$ cut -b -3 state.txt
And
Aru

print only 2nd charecter
$ cut -b 2 x.txt
n
r
     OR
-c (column):-
Syntax:- $cut -c [(k)-(n)/(k),(n)/(n)] filename
where - k denotes the starting position of the character and n denotes the ending position of the character in each line

$ cut -c 2,5,7 state.txt
nr
rah

$ cut -c 1-7 state.txt
Andhra
Arunach

$ cut -c 1- state.txt
Andhra Pradesh
Arunachal Pradesh

$ cut -c -5 state.txt
Andhr
Aruna

-f (field):-
delimiter by using -d option.
Syntax:- $cut -d "delimiter" -f (field number) file.txt

$ cut -f 1 state.txt
Andhra Pradesh
Arunachal Pradesh

$ cut -d " " -f 1 state.txt
Andhra
Arunachal

$ cut -d " " -f 1-2 state.txt
Output:
Andhra Pradesh
Arunachal Pradesh

 –complement:- As the name suggests it complement the output. This option can be used in the combination 
               with other options either with -f or with -c.
$ cut --complement -d " " -f 1 state.txt
Pradesh
Pradesh

$ cut --complement -c 5 state.txt
Andha Pradesh
Arunchal Pradesh
----------------------------------------------------------------------------------------------



https://unix.stackexchange.com/questions/117467/how-to-permanently-set-environmental-variables



-----------------------------------------------------------------------------------------------
DU --> disk usage

arguments:
              -s --> summarized
              -h --> in human readable format MB, GB...
              --apparent-size  --> command line switch makes it measure apparent sizes (what ls shows) rather than actual disk usage.

# ll -lh
drwxrwxr-x.  3 vagrant vagrant   16 Apr 19 06:25 git_test

[vagrant@localhost ~]$ du --apparent-size -sh git_test/
16K	git_test/
[vagrant@localhost ~]$ du -sh git_test/
56K	git_test/
[vagrant@localhost ~]$ du --apparent-size -h git_test/
6	git_test/.git/refs/heads
6	git_test/.git/refs/tags
43	git_test/.git/refs
6	git_test/.git/branches
15K	git_test/.git/hooks
261	git_test/.git/info
6	git_test/.git/objects/pack
6	git_test/.git/objects/info
42	git_test/.git/objects
16K	git_test/.git
16K	git_test/


--------------------------------------------------------------------------------------------------------
















